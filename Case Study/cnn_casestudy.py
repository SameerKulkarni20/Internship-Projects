# -*- coding: utf-8 -*-
"""CNN_casestudy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N7HVicddAAKf7i--ggoMTxncQZ4TDeX0
"""

!pip install Sequential

import tensorflow.keras.models

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Load the CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

# Normalize pixel values to the range [0, 1]
x_train, x_test = x_train / 255.0, x_test / 255.0

# Convert class labels to one-hot encoding
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)

# Create a simplified CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    MaxPooling2D(),
    Flatten(),
    Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model for fewer epochs (e.g., 5)
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Evaluate the model
test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

# Make predictions
predictions = model.predict(x_test)

# Function to display a few images with their predicted and true labels
def display_predictions(images, true_labels, predictions, class_names, num_images=10):
    plt.figure(figsize=(15, 6))
    for i in range(num_images):
        plt.subplot(2, 5, i + 1)
        plt.imshow(images[i])
        plt.axis('off')
        predicted_label = np.argmax(predictions[i])  # Get predicted class
        true_label = np.argmax(true_labels[i])  # Get true class
        plt.title(f'True: {class_names[true_label]}\nPred: {class_names[predicted_label]}')
    plt.show()

# Define class names according to CIFAR-10 dataset
class_names = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer',
               'Dog', 'Frog', 'Horse', 'Ship', 'Truck']

# Display predictions for a subset of the test images
display_predictions(x_test, y_test, predictions, class_names, num_images=10)

