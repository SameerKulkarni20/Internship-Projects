# -*- coding: utf-8 -*-
"""LSTM_casestudy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NinAB7M8sLupV-SsK71E9FNgjRp9hGIv
"""

pip install yfinance numpy pandas tensorflow scikit-learn

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Step 1: Load and prepare the dataset
data = pd.read_csv('/content/bitcoin_price.csv')
close_prices = data['Close'].values.reshape(-1, 1)

# Step 2: Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(close_prices)

# Step 3: Create sequences (60 days of data to predict the next day)
X, y = [], []
for i in range(60, len(scaled_data)):
    X.append(scaled_data[i-60:i, 0])  # Past 60 days
    y.append(scaled_data[i, 0])       # Next day

X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # Reshape for LSTM

# Step 4: Build and compile the LSTM model
model = Sequential([
    LSTM(50, return_sequences=False, input_shape=(X.shape[1], 1)),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=5, batch_size=32, verbose=1)

# Step 5: Make a prediction for the next day based on the last 60 days of data
test_input = scaled_data[-60:].reshape(1, 60, 1)
predicted_price = model.predict(test_input)
predicted_price = scaler.inverse_transform(predicted_price)  # Convert to original scale

print("Predicted Bitcoin price for the next day:", predicted_price[0][0])

